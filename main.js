/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => EmbeddedNoteTitlesPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  fontSize: "14px",
  showCollapseIcon: true,
  showEditButton: true,
  showJumpButton: true,
  jumpInNewTab: true,
  autoSaveDelay: 1e3,
  manualSaveOnly: false,
  livePreviewEnabled: false,
  collapseStates: {}
};
var EmbeddedNoteTitlesPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.collapseStates = /* @__PURE__ */ new Map();
    this.embeddedBlocks = /* @__PURE__ */ new Map();
    this.lastEmbeddedCount = 0;
    // 调试日志总开关（默认关闭，避免重复输出）
    this.debugVerbose = false;
    // 日志去抖：同一 key 在 ttl 内只打印一次
    this.lastLogTimes = /* @__PURE__ */ new Map();
    // 编辑中的文件集合，用于防止编辑时触发重新渲染
    this.editingFiles = /* @__PURE__ */ new Set();
    // 追踪本插件添加到 DOM 的事件监听器，便于卸载时完全移除
    this.trackedEvents = [];
    // 缓存图片嵌入检测结果，避免重复检测
    this.imageEmbedCache = /* @__PURE__ */ new Map();
    // 防止短时间内重复处理同一个容器
    this.processingContainers = /* @__PURE__ */ new Set();
    // 缓存文件类型检测结果，避免重复的文件解析
    this.fileTypeCache = /* @__PURE__ */ new Map();
    // 防止短时间内重复处理，提升性能
    this.processingThrottle = /* @__PURE__ */ new Map();
    // 缓存已处理的文件路径，避免重复处理相同的文件结构
    this.processedFiles = /* @__PURE__ */ new Set();
    // 缓存文件的嵌入结构，避免重复计算
    this.fileEmbedStructure = /* @__PURE__ */ new Map();
  }
  /** 为元素添加监听器并记录，便于后续移除 */
  addTrackedEventListener(el, type, handler, options) {
    try {
      el.addEventListener(type, handler, options);
      this.trackedEvents.push({ el, type, handler, options });
    } catch (e) {
    }
  }
  /** 移除某个根节点下所有由本插件添加的事件监听器 */
  removeTrackedEventListenersForRoot(root) {
    const remaining = [];
    this.trackedEvents.forEach((rec) => {
      const target = rec.el;
      const isNode = target && typeof target === "object" && "addEventListener" in target;
      let shouldRemove = false;
      if (isNode) {
        if (target === root) {
          shouldRemove = true;
        } else if (target instanceof Node && root.contains(target)) {
          shouldRemove = true;
        }
      }
      if (shouldRemove) {
        try {
          target.removeEventListener(rec.type, rec.handler, rec.options);
        } catch (e) {
        }
      } else {
        remaining.push(rec);
      }
    });
    this.trackedEvents = remaining;
  }
  /** 移除所有由本插件添加的事件监听器 */
  removeAllTrackedEventListeners() {
    this.trackedEvents.forEach((rec) => {
      try {
        rec.el.removeEventListener(rec.type, rec.handler, rec.options);
      } catch (e) {
      }
    });
    this.trackedEvents = [];
  }
  logOnce(key, message, ...args) {
    const now = Date.now();
    const last = this.lastLogTimes.get(key) || 0;
    const ttl = 500;
    if (now - last > ttl) {
      if (this.debugVerbose)
        console.log(message, ...args);
      this.lastLogTimes.set(key, now);
    }
  }
  /** 重新渲染当前 Markdown 视图（不新开面板） */
  async refreshActiveMarkdownView() {
    try {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      const file = this.app.workspace.getActiveFile();
      if (view && file) {
        await view.leaf.openFile(file, { active: true });
      }
    } catch (e) {
    }
  }
  /** 获取嵌入内容容器（兼容 markdown-embed-content 与 internal-embed-content） */
  getEmbedContent(block) {
    return block.querySelector(".markdown-embed-content, .internal-embed-content");
  }
  async onload() {
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Plugin loading...");
    await this.loadSettings();
    this.restoreCollapseStates();
    this.addSettingTab(new EmbeddedNoteTitlesSettingTab(this.app, this));
    this.initializePlugin();
  }
  /**
   * 恢复保存的折叠状态
   */
  restoreCollapseStates() {
    Object.entries(this.settings.collapseStates).forEach(([blockId, isCollapsed]) => {
      this.collapseStates.set(blockId, isCollapsed);
    });
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Restored collapse states:", this.settings.collapseStates);
  }
  /**
   * 保存当前的折叠状态到设置中
   */
  saveCurrentCollapseStates() {
    this.settings.collapseStates = Object.fromEntries(this.collapseStates);
    this.saveSettings();
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Saved collapse states:", this.settings.collapseStates);
  }
  /**
   * 应用保存的折叠状态到所有嵌入块（包括嵌套的）
   */
  applySavedCollapseStates() {
    const allProcessedBlocks = document.querySelectorAll(".markdown-embed[data-embedded-note-enhanced], .internal-embed[data-embedded-note-enhanced]");
    allProcessedBlocks.forEach((block) => {
      const blockId = block.getAttribute("data-block-id");
      if (blockId && this.collapseStates.has(blockId)) {
        const isCollapsed = this.collapseStates.get(blockId);
        if (isCollapsed !== void 0) {
          this.setBlockCollapsed(block, isCollapsed);
          if (this.debugVerbose)
            console.log(`[EmbeddedNoteTitles] Applied saved collapse state for ${blockId}: ${isCollapsed}`);
        }
      }
    });
  }
  /**
   * 初始化插件功能
   */
  initializePlugin() {
    var _a, _b, _c, _d;
    this.addStyles();
    this.registerMarkdownPostProcessor((element) => {
      this.processEmbeddedBlocksIn(element);
    });
    this.registerEvent(
      this.app.workspace.on("layout-change", () => {
        this.processEmbeddedBlocks();
      })
    );
    this.registerEvent(
      this.app.workspace.on("file-open", () => {
        this.preloadFileTypeCache();
        setTimeout(() => {
          this.processEmbeddedBlocks();
        }, 200);
        setTimeout(() => {
          this.applySavedCollapseStates();
        }, 800);
        this.startBootstrapSweep();
      })
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.processEmbeddedBlocks();
      })
    );
    this.registerEvent(
      this.app.vault.on("modify", (file) => {
        if (file instanceof import_obsidian.TFile) {
          this.handleFileModify(file);
        }
      })
    );
    this.registerEvent(
      this.app.vault.on("rename", (file) => {
        if (file instanceof import_obsidian.TFile) {
          this.handleFileSave(file);
        }
      })
    );
    this.registerEvent(
      (_b = (_a = this.app.metadataCache).on) == null ? void 0 : _b.call(_a, "resolved", () => {
        setTimeout(() => {
          this.processEmbeddedBlocks();
        }, 300);
        this.startBootstrapSweep();
      })
    );
    this.setupMutationObserver();
    this.registerEvent(
      this.app.workspace.on("resize", () => {
        setTimeout(() => {
          this.processEmbeddedBlocks();
        }, 100);
      })
    );
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Starting initial processing...");
    this.processEmbeddedBlocks();
    this.startBootstrapSweep();
    (_d = (_c = this.app.workspace).onLayoutReady) == null ? void 0 : _d.call(_c, () => {
      setTimeout(() => {
        this.processEmbeddedBlocks();
      }, 100);
    });
    setTimeout(() => {
      this.processEmbeddedBlocks();
    }, 500);
    setTimeout(() => {
      this.processEmbeddedBlocks();
    }, 1500);
    this.setupPeriodicCheck();
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Plugin loaded successfully");
    window.embeddedNoteTitlesPlugin = this;
  }
  /** 冷启动短期高频扫描，覆盖二层嵌套渲染滞后 */
  startBootstrapSweep() {
    if (this.bootstrapSweepInterval)
      clearInterval(this.bootstrapSweepInterval);
    const deadline = Date.now() + 3e3;
    this.lastEmbeddedCount = 0;
    this.bootstrapSweepInterval = setInterval(() => {
      this.processEmbeddedBlocks();
      const current = this.embeddedBlocks.size;
      if (current === this.lastEmbeddedCount || Date.now() > deadline) {
        clearInterval(this.bootstrapSweepInterval);
        this.bootstrapSweepInterval = void 0;
        if (this.debugVerbose)
          console.log("[EmbeddedNoteTitles] Bootstrap sweep completed");
        return;
      }
      this.lastEmbeddedCount = current;
    }, 500);
  }
  /**
   * 冷启动/重渲染后统一对块与内容应用与"编辑保存后"一致的样式
   */
  applyUnifiedBlockStyles(block) {
    if (!block.matches(".markdown-embed, .internal-embed"))
      return;
    if (this.isImageEmbed(block)) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping style application for image embed:`, block);
      return;
    }
    const level = this.calculateNestLevel(block);
    block.style.setProperty("margin-left", `${level * 7}px`, "important");
    block.style.setProperty("margin-right", `${level * 14}px`, "important");
    block.style.setProperty("margin-top", "0px", "important");
    block.style.setProperty("margin-bottom", "0px", "important");
    block.style.setProperty("display", "block", "important");
    block.style.setProperty("box-sizing", "border-box", "important");
    block.setAttribute("data-nest-level", String(level));
    const content = this.getEmbedContent(block);
    if (content) {
      content.style.setProperty("padding-left", "14px", "important");
      content.style.setProperty("padding-right", "14px", "important");
      content.style.setProperty("box-sizing", "border-box", "important");
    }
    const titleBar = block.querySelector(".embedded-note-title-bar");
    if (titleBar) {
      titleBar.style.setProperty("width", "100%", "important");
      titleBar.style.setProperty("box-sizing", "border-box", "important");
    }
  }
  onunload() {
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Plugin unloading...");
    try {
      delete window.embeddedNoteTitlesPlugin;
    } catch (e) {
    }
    this.removeAllTitleBars();
    this.removeAllTrackedEventListeners();
    this.removeStyles();
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
      this.mutationObserver = void 0;
    }
    if (this.periodicCheckInterval) {
      clearInterval(this.periodicCheckInterval);
      this.periodicCheckInterval = void 0;
    }
    if (this.bootstrapSweepInterval) {
      clearInterval(this.bootstrapSweepInterval);
      this.bootstrapSweepInterval = void 0;
    }
    this.saveCurrentCollapseStates();
    this.embeddedBlocks.clear();
    this.collapseStates.clear();
    this.lastLogTimes.clear();
    this.imageEmbedCache.clear();
    this.processingContainers.clear();
    this.fileTypeCache.clear();
    this.processingThrottle.clear();
    this.processedFiles.clear();
    this.fileEmbedStructure.clear();
    try {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      const file = this.app.workspace.getActiveFile();
      if (view && file) {
        setTimeout(() => {
          void view.leaf.openFile(file, { active: true });
        }, 100);
      }
    } catch (e) {
    }
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Plugin unloaded successfully");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  /**
   * 设置 MutationObserver 来监听DOM变化
   */
  setupMutationObserver() {
    this.mutationObserver = new MutationObserver((mutations) => {
      const activeElement = document.activeElement;
      if (activeElement && activeElement.closest(".embedded-note-editor") || document.querySelector("textarea.embedded-note-editor")) {
        return;
      }
      let shouldProcess = false;
      let shouldReprocessNested = false;
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node;
              if (element.classList.contains("markdown-embed") || element.classList.contains("internal-embed") || element.querySelector(".markdown-embed, .internal-embed")) {
                shouldProcess = true;
              }
              if (element.classList.contains("markdown-embed-content") || element.querySelector(".markdown-embed-content")) {
                shouldReprocessNested = true;
              }
            }
          });
          mutation.removedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node;
              if (element.classList.contains("markdown-embed") || element.classList.contains("internal-embed")) {
                shouldReprocessNested = true;
              }
            }
          });
        } else if (mutation.type === "attributes") {
          const el = mutation.target;
          if (el.classList.contains("markdown-embed") || el.classList.contains("internal-embed")) {
            if (el.classList.contains("is-loaded")) {
              const hasTitle = !!el.querySelector(".embedded-note-title-bar");
              if (!hasTitle) {
                try {
                  this.processEmbeddedBlock(el);
                } catch (e) {
                }
              }
              this.applyUnifiedBlockStyles(el);
            }
          }
        }
      });
      if (shouldProcess) {
        setTimeout(() => {
          this.processEmbeddedBlocks();
        }, 300);
      }
      if (shouldReprocessNested) {
        setTimeout(() => {
          this.reprocessAllNestedEmbeds();
        }, 500);
      }
    });
    this.mutationObserver.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ["class"]
    });
  }
  /**
   * 设置定期检查机制
   */
  setupPeriodicCheck() {
    this.periodicCheckInterval = setInterval(() => {
      const activeElement = document.activeElement;
      if (activeElement && activeElement.closest(".embedded-note-editor") || document.querySelector("textarea.embedded-note-editor")) {
        return;
      }
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView)
        return;
      const container = activeView.contentEl;
      if (!container)
        return;
      const unprocessedEmbeds = container.querySelectorAll(".markdown-embed:not([data-title-bar-added]), .internal-embed:not([data-title-bar-added])");
      if (unprocessedEmbeds.length > 0) {
        unprocessedEmbeds.forEach((embedBlock) => {
          this.processEmbeddedBlock(embedBlock);
        });
      }
    }, 1e4);
  }
  /**
   * 添加样式到页面
   */
  addStyles() {
    const styleEl = document.createElement("style");
    styleEl.id = "embedded-note-titles-styles";
    styleEl.textContent = `
			/* Embedded Note Titles Plugin Styles */
			.embedded-note-title-bar {
				position: relative;
				z-index: 1;
				transition: all 0.2s ease;
                box-sizing: border-box;
                width: 100%;
			}

			/* \u5F3A\u5236\u8986\u76D6\u6240\u6709\u53EF\u80FD\u7684\u4E3B\u9898\u6837\u5F0F - \u6700\u9AD8\u4F18\u5148\u7EA7 */
			.markdown-embed[data-embedded-note-enhanced="true"],
			.internal-embed[data-embedded-note-enhanced="true"],
			div.markdown-embed[data-embedded-note-enhanced="true"],
			span.internal-embed[data-embedded-note-enhanced="true"] {
				margin-left: 0px !important;
				margin-right: 0px !important;
				margin-top: 0px !important;
				margin-bottom: 0px !important;
				box-sizing: border-box !important;
			}

			/* Ensure span.internal-embed behaves like a block when enhanced */
			.internal-embed[data-embedded-note-enhanced="true"],
			.markdown-embed[data-embedded-note-enhanced="true"] {
				display: block;
				width: 100%;
			}

			/* Hide Obsidian's default embed header and open-link icon only when enhanced */
			.markdown-embed[data-embedded-note-enhanced="true"] .markdown-embed-title,
			.markdown-embed[data-embedded-note-enhanced="true"] .markdown-embed-link,
			.internal-embed[data-embedded-note-enhanced="true"] .embed-title,
			.internal-embed[data-embedded-note-enhanced="true"] .markdown-embed-link {
				display: none !important;
			}

			/* When collapsed, hide everything except our custom title bar */
			.markdown-embed.embedded-note-collapsed[data-embedded-note-enhanced="true"] > :not(.embedded-note-title-bar),
			.internal-embed.embedded-note-collapsed[data-embedded-note-enhanced="true"] > :not(.embedded-note-title-bar) {
				display: none !important;
			}

			/* \u7EDF\u4E00\u7684\u5D4C\u5165\u5757\u6837\u5F0F\uFF08\u540C\u65F6\u8986\u76D6 markdown-embed \u4E0E internal-embed\uFF09 */
			.markdown-embed[data-embedded-note-enhanced="true"],
			.internal-embed[data-embedded-note-enhanced="true"] {
				margin-top: 0px;
				margin-bottom: 0px;
				border-radius: 6px;
				overflow: hidden;
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
				transition: all 0.2s ease;
				border: 1px solid var(--background-modifier-border);
				padding: 0; /* \u5747\u8861\u4E0D\u540C\u7C7B\u578B\u5BB9\u5668\u7684\u9ED8\u8BA4\u5185\u8FB9\u8DDD\u5DEE\u5F02 */
			}

			.markdown-embed[data-embedded-note-enhanced="true"]:hover {
				box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
			}

            /* \u5D4C\u5957\u5C42\u7EA7\u6837\u5F0F - \u5916\u6846\u4E0E\u5916\u5C42\u95F4\u8DDD\uFF1A\u5DE67px/\u5C42\uFF0C\u53F314px/\u5C42 */
            /* \u4F7F\u7528\u66F4\u9AD8\u4F18\u5148\u7EA7\u7684\u9009\u62E9\u5668\u786E\u4FDD\u6837\u5F0F\u751F\u6548 */
            .markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="0"],
            .internal-embed[data-embedded-note-enhanced="true"][data-nest-level="0"],
            div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="0"],
            span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="0"] {
                margin-left: 0px !important;
                margin-right: 0px !important;
                box-sizing: border-box !important;
            }

            .markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="1"],
            .internal-embed[data-embedded-note-enhanced="true"][data-nest-level="1"],
            div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="1"],
            span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="1"] {
                margin-left: 7px !important;
                margin-right: 14px !important;
                box-sizing: border-box !important;
            }

            .markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="2"],
            .internal-embed[data-embedded-note-enhanced="true"][data-nest-level="2"],
            div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="2"],
            span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="2"] {
                margin-left: 14px !important;
                margin-right: 28px !important;
                box-sizing: border-box !important;
            }

            .markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="3"],
            .internal-embed[data-embedded-note-enhanced="true"][data-nest-level="3"],
            div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="3"],
            span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="3"] {
                margin-left: 21px !important;
                margin-right: 42px !important;
                box-sizing: border-box !important;
            }

			/* \u7EDF\u4E00\u7684\u6807\u9898\u680F\u6837\u5F0F - \u4F7F\u7528Obsidian\u4E3B\u9898\u53D8\u91CF */
			.markdown-embed[data-embedded-note-enhanced="true"] .embedded-note-title-bar,
			.internal-embed[data-embedded-note-enhanced="true"] .embedded-note-title-bar {
				background-color: var(--background-secondary);
				color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)));
				border-bottom: 1px solid var(--background-modifier-border);
				position: relative;
				font-weight: var(--font-weight-normal);
			}

			.embedded-note-title-bar:hover {
				background-color: var(--background-modifier-hover) !important;
			}

			.embedded-note-title-bar:active {
				background-color: var(--background-modifier-active) !important;
			}

			.embedded-note-collapse-icon {
				opacity: 0.7;
				color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)));
				transition: transform 0.2s ease, opacity 0.2s ease;
			}

			.embedded-note-title-bar:hover .embedded-note-collapse-icon {
				opacity: 1;
				color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)));
			}

			/* \u7F16\u8F91\u6309\u94AE\u6837\u5F0F */
			.embedded-note-edit-btn {
				background: var(--background-primary) !important;
				color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
				border: 1px solid var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
				transition: all 0.2s ease !important;
			}

			.embedded-note-edit-btn:hover {
				background: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
				color: var(--background-primary) !important;
				border-color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
			}

			.embedded-note-edit-btn:active {
				background: var(--background-modifier-active) !important;
			}

			/* \u8DF3\u8F6C\u6309\u94AE\u6837\u5F0F */
			.embedded-note-jump-btn {
				background: var(--background-primary) !important;
				color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
				border: 1px solid var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
				transition: all 0.2s ease !important;
			}

			.embedded-note-jump-btn:hover {
				background: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
				color: var(--background-primary) !important;
				border-color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed))) !important;
			}

			.embedded-note-jump-btn:active {
				background: var(--background-modifier-active) !important;
			}

			/* \u79FB\u9664\u5D4C\u5957\u5C42\u7EA7\u6307\u793A\u5668\u6837\u5F0F */

			/* \u786E\u4FDD\u4E0E\u4E0D\u540C\u4E3B\u9898\u7684\u517C\u5BB9\u6027 */
			.theme-dark .embedded-note-title-bar {
				border-bottom-color: var(--background-modifier-border);
			}

			.theme-light .embedded-note-title-bar {
				border-bottom-color: var(--background-modifier-border);
			}

			/* Minimal \u4E3B\u9898\u517C\u5BB9\u6027 */
			.minimal-theme .embedded-note-title-bar {
				background-color: var(--background-secondary);
			}

			/* Blue Topaz \u4E3B\u9898\u517C\u5BB9\u6027 */
			.blue-topaz .embedded-note-title-bar {
				background-color: var(--background-secondary);
			}

			/* Things \u4E3B\u9898\u517C\u5BB9\u6027 */
			.things-theme .embedded-note-title-bar {
				background-color: var(--background-secondary);
			}

			/* Dracula \u4E3B\u9898\u517C\u5BB9\u6027 */
			.dracula-theme .embedded-note-title-bar {
				background-color: var(--background-secondary);
			}

			/* \u901A\u7528\u4E3B\u9898\u517C\u5BB9\u6027 - \u786E\u4FDD\u5728\u6240\u6709\u4E3B\u9898\u4E0B\u90FD\u6709\u826F\u597D\u7684\u89C6\u89C9\u6548\u679C */
			.markdown-embed[data-embedded-note-enhanced="true"],
			.internal-embed[data-embedded-note-enhanced="true"] {
				background-color: var(--background-primary);
			}

            .markdown-embed[data-embedded-note-enhanced="true"] .markdown-embed-content,
            .internal-embed[data-embedded-note-enhanced="true"] .markdown-embed-content,
            .internal-embed[data-embedded-note-enhanced="true"] .internal-embed-content {
				background-color: var(--background-primary);
                padding-left: 14px;
                padding-right: 14px;
                box-sizing: border-box;
			}

			/* \u786E\u4FDD\u6807\u9898\u680F\u5728\u5D4C\u5165\u5185\u5BB9\u4E0A\u65B9 */
			.markdown-embed .embedded-note-title-bar {
				margin: 0;
				border-radius: 0;
			}

			/* \u54CD\u5E94\u5F0F\u8BBE\u8BA1 */
			@media (max-width: 768px) {
				.embedded-note-title-bar {
					padding: 6px 10px;
					font-size: 13px;
				}
				
				.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="1"],
				.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="1"],
				div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="1"],
				span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="1"] {
					margin-left: 7px !important;
				}
				
				.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="2"],
				.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="2"],
				div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="2"],
				span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="2"] {
					margin-left: 14px !important;
				}
				
				.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="3"],
				.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="3"],
				div.markdown-embed[data-embedded-note-enhanced="true"][data-nest-level="3"],
				span.internal-embed[data-embedded-note-enhanced="true"][data-nest-level="3"] {
					margin-left: 21px !important;
				}
			}

			/* \u9AD8\u5BF9\u6BD4\u5EA6\u6A21\u5F0F\u652F\u6301 */
			@media (prefers-contrast: high) {
				.embedded-note-title-bar {
					border: 1px solid var(--text-normal);
				}
			}

			/* \u51CF\u5C11\u52A8\u753B\u6A21\u5F0F\u652F\u6301 */
			@media (prefers-reduced-motion: reduce) {
				.embedded-note-title-bar,
				.embedded-note-collapse-icon {
					transition: none;
				}
			}

			/* \u7F16\u8F91\u6A21\u5F0F\u6837\u5F0F\uFF08\u4F7F\u7528 textarea \u8FDB\u884C\u539F\u6587\u7F16\u8F91\uFF09 */
			.embedded-note-editor {
				width: 100%;
				min-height: 140px;
				box-sizing: border-box;
				border: 1px solid var(--background-modifier-border);
				border-radius: 4px;
				padding: 8px;
				background-color: var(--background-primary);
				color: var(--text-normal);
				font-family: var(--font-editor);
				font-size: var(--editor-font-size);
				line-height: 1.5;
				resize: vertical;
			}

			/* \u5D4C\u5957\u5D4C\u5165\u5185\u5BB9\u7684\u8FC7\u6E21\u6548\u679C */
			.markdown-embed-content {
				transition: height 0.3s ease, visibility 0.3s ease;
			}

		`;
    document.head.appendChild(styleEl);
  }
  /**
   * 处理嵌入块，添加标题栏
   */
  processEmbeddedBlocks() {
    this.throttledProcess("processEmbeddedBlocks", () => {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView)
        return;
      const container = activeView.contentEl;
      if (!container)
        return;
      this.processEmbeddedBlocksIn(container);
    }, 150);
  }
  /**
   * 在指定容器内处理嵌入块
   */
  processEmbeddedBlocksIn(container) {
    let embeddedBlocks = container.querySelectorAll(".markdown-embed");
    if (embeddedBlocks.length === 0) {
      embeddedBlocks = container.querySelectorAll(".internal-embed");
    }
    if (embeddedBlocks.length === 0) {
      embeddedBlocks = container.querySelectorAll('[data-type="markdown-embed"]');
    }
    this.logOnce("found-embeds-" + embeddedBlocks.length, `[EmbeddedNoteTitles] Found ${embeddedBlocks.length} embedded blocks in container`);
    const blocksArray = Array.from(embeddedBlocks);
    blocksArray.sort((a, b) => {
      const aLevel = this.calculateNestLevel(a);
      const bLevel = this.calculateNestLevel(b);
      return aLevel - bLevel;
    });
    blocksArray.forEach((block) => {
      if (this.isImageEmbed(block)) {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Skipping image embed in main processing:`, block);
        return;
      }
      this.processEmbeddedBlock(block);
      this.applyUnifiedBlockStyles(block);
    });
    setTimeout(() => {
      this.processNestedEmbeds(container, 0);
    }, 100);
    setTimeout(() => {
      this.processNestedEmbeds(container, 0);
    }, 300);
    setTimeout(() => {
      this.processNestedEmbeds(container, 0);
    }, 600);
    setTimeout(() => {
      this.processAllNestedEmbeds(container);
    }, 1e3);
  }
  /**
   * 递归处理嵌套的嵌入块
   */
  processNestedEmbeds(container, depth = 0) {
    if (depth > 10) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Maximum recursion depth reached in processNestedEmbeds`);
      return;
    }
    if (this.processingContainers.has(container)) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Container already being processed, skipping`);
      return;
    }
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if ((activeView == null ? void 0 : activeView.file) && !this.shouldReprocessNestedEmbeds(activeView.file.path)) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping nested processing due to cache`);
      return;
    }
    this.processingContainers.add(container);
    const allEmbeds = container.querySelectorAll('.markdown-embed, .internal-embed, [data-type="markdown-embed"]');
    this.logOnce("nested-total-" + allEmbeds.length, `[EmbeddedNoteTitles] Found ${allEmbeds.length} total embeds in nested processing`);
    let hasNewEmbeds = false;
    let processedCount = 0;
    let imageEmbedCount = 0;
    allEmbeds.forEach((embedBlock) => {
      var _a, _b;
      if (this.isImageEmbed(embedBlock)) {
        imageEmbedCount++;
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Skipping nested image embed:`, embedBlock);
        return;
      }
      if (!embedBlock.hasAttribute("data-title-bar-added")) {
        if (this.debugVerbose) {
          console.log(`[EmbeddedNoteTitles] Processing nested embed:`, embedBlock);
          console.log(`[EmbeddedNoteTitles] Block classes:`, embedBlock.className);
          console.log(`[EmbeddedNoteTitles] Block attributes:`, Array.from(embedBlock.attributes).map((attr) => `${attr.name}="${attr.value}"`));
          console.log(`[EmbeddedNoteTitles] Block children:`, Array.from(embedBlock.children).map((child) => `${child.tagName}.${child.className}`));
          console.log(`[EmbeddedNoteTitles] Block parent:`, (_a = embedBlock.parentElement) == null ? void 0 : _a.tagName, (_b = embedBlock.parentElement) == null ? void 0 : _b.className);
        }
        this.processEmbeddedBlock(embedBlock);
        processedCount++;
        hasNewEmbeds = true;
      }
    });
    if (depth === 0 && (activeView == null ? void 0 : activeView.file)) {
      this.cacheFileEmbedStructure(activeView.file.path, allEmbeds.length, imageEmbedCount > 0);
    }
    if (hasNewEmbeds && processedCount > 0) {
      this.logOnce("nested-processing-again", `[EmbeddedNoteTitles] Found new nested embeds, processing again...`);
      setTimeout(() => {
        this.processNestedEmbeds(container, depth + 1);
      }, 50);
    }
    this.refreshAllNestLevels();
    this.applySavedCollapseStates();
    setTimeout(() => {
      this.processingContainers.delete(container);
    }, 100);
  }
  /**
   * 处理所有可能的嵌套嵌入（更全面的方法）
   */
  processAllNestedEmbeds(container) {
    this.logOnce("all-nested-start", `[EmbeddedNoteTitles] Processing all nested embeds with comprehensive method`);
    const allPossibleEmbeds = container.querySelectorAll(`
			.markdown-embed,
			.internal-embed,
			[data-type="markdown-embed"],
			.markdown-embed-content .markdown-embed,
			.markdown-embed-content .internal-embed,
			.internal-embed-content .markdown-embed,
			.internal-embed-content .internal-embed
		`);
    this.logOnce("all-nested-count-" + allPossibleEmbeds.length, `[EmbeddedNoteTitles] Found ${allPossibleEmbeds.length} possible embeds with comprehensive method`);
    allPossibleEmbeds.forEach((embedBlock) => {
      if (!embedBlock.hasAttribute("data-title-bar-added")) {
        if (this.isImageEmbed(embedBlock)) {
          if (this.debugVerbose)
            console.log(`[EmbeddedNoteTitles] Skipping comprehensive processing of image embed:`, embedBlock);
          return;
        }
        try {
          this.processEmbeddedBlock(embedBlock);
        } catch (error) {
          console.error(`[EmbeddedNoteTitles] Error processing embed:`, error);
        }
      }
      this.applyUnifiedBlockStyles(embedBlock);
    });
    this.refreshAllNestLevels();
    this.applySavedCollapseStates();
  }
  /**
   * 重新计算并写回所有已增强嵌入块的嵌套层级
   */
  refreshAllNestLevels() {
    const all = document.querySelectorAll(".markdown-embed[data-embedded-note-enhanced], .internal-embed[data-embedded-note-enhanced]");
    all.forEach((block) => {
      const level = this.calculateNestLevel(block);
      block.setAttribute("data-nest-level", String(level));
      block.style.setProperty("margin-left", `${level * 7}px`, "important");
      block.style.setProperty("margin-right", `${level * 14}px`, "important");
      block.style.setProperty("margin-top", "0px", "important");
      block.style.setProperty("margin-bottom", "0px", "important");
      this.applyUnifiedBlockStyles(block);
    });
  }
  /**
   * 根据当前设置，立即对所有已处理的嵌入块应用原地编辑开关
   */
  applyInlineEditingState() {
    this.embeddedBlocks.forEach((block) => {
      const embedContent = block.querySelector(".markdown-embed-content");
      if (!embedContent)
        return;
      const isCollapsed = block.classList.contains("embedded-note-collapsed");
      if (block.getAttribute("data-editing") === "true" && !isCollapsed) {
        this.enableInlineEditing(block);
      } else {
        this.disableInlineEditing(embedContent);
      }
    });
  }
  /**
   * 根据设置对当前已打开的编辑器应用/移除预览
   */
  async applyLivePreviewState() {
    for (const [, block] of this.embeddedBlocks) {
      const embedContent = this.getEmbedContent(block);
      if (!embedContent)
        continue;
      const editor = embedContent.querySelector("textarea.embedded-note-editor");
      const existing = embedContent.querySelector(".embedded-note-preview");
      if (!editor)
        continue;
      if (this.settings.livePreviewEnabled) {
      } else {
        if (existing)
          existing.remove();
      }
    }
  }
  /**
   * 处理单个嵌入块
   */
  processEmbeddedBlock(block) {
    var _a;
    if (block.hasAttribute("data-title-bar-added")) {
      const hasBar = !!block.querySelector(".embedded-note-title-bar");
      if (hasBar)
        return;
    }
    if (this.isImageEmbed(block)) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping image embed, using native Obsidian behavior:`, block);
      return;
    }
    if (block.tagName.toLowerCase() !== "div" && block.tagName.toLowerCase() !== "span") {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping non-div/span element:`, block.tagName, block);
      return;
    }
    if (block.tagName.toLowerCase() === "span") {
      const hasEmbedContent = block.querySelector(".markdown-embed-content") || block.querySelector(".embed-title") || block.classList.contains("internal-embed") || block.classList.contains("markdown-embed");
      if (!hasEmbedContent) {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Skipping span without embed content:`, block);
        return;
      }
    }
    this.logOnce("process-block-" + block.tagName + "-" + block.className, `[EmbeddedNoteTitles] Processing block: ${block.tagName} ${block.className}`);
    let href = null;
    let embedLink = block.querySelector(".markdown-embed-link");
    if (!embedLink)
      embedLink = block.querySelector(".internal-link");
    if (!embedLink)
      embedLink = block.querySelector("a[href]");
    if (embedLink) {
      href = embedLink.getAttribute("href");
    }
    if (!href) {
      href = block.getAttribute("src") || block.getAttribute("href") || block.getAttribute("data-src");
    }
    if (!href) {
      return;
    }
    const fileName = this.extractFileName(href);
    if (!fileName) {
      return;
    }
    let fileExists = false;
    const resolvedFile = this.app.metadataCache.getFirstLinkpathDest(fileName, ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "");
    if (resolvedFile) {
      fileExists = true;
    } else {
      const directFile = this.app.vault.getAbstractFileByPath(fileName);
      if (directFile) {
        fileExists = true;
      } else {
        const mdFile = this.app.vault.getAbstractFileByPath(`${fileName}.md`);
        if (mdFile) {
          fileExists = true;
        }
      }
    }
    this.logOnce("file-exists-" + fileName + "-" + fileExists, `[EmbeddedNoteTitles] File exists check for ${fileName}: ${fileExists}`);
    if (!fileExists) {
      console.log(`[EmbeddedNoteTitles] File does not exist, removing enhancement for ${fileName}`);
      this.removeEnhancement(block);
      return;
    }
    const nestLevel = this.calculateNestLevel(block);
    const blockId = this.generateBlockId(block, fileName);
    const existingTitleBar = block.querySelector(".embedded-note-title-bar");
    if (existingTitleBar) {
      this.logOnce("title-exists-" + blockId, `[EmbeddedNoteTitles] Title bar already exists for block ${blockId}, skipping insertion`);
      return;
    }
    const titleBar = this.createTitleBar(fileName, blockId, nestLevel);
    let embedContent = this.getEmbedContent(block);
    if (!embedContent) {
      try {
        const container = document.createElement("div");
        container.className = "markdown-embed-content";
        while (block.firstChild)
          block.removeChild(block.firstChild);
        block.appendChild(container);
        const activeFile = this.app.workspace.getActiveFile();
        let file = this.app.metadataCache.getFirstLinkpathDest(fileName, (activeFile == null ? void 0 : activeFile.path) || "");
        if (!file) {
          file = this.app.vault.getAbstractFileByPath(fileName) || this.app.vault.getAbstractFileByPath(`${fileName}.md`);
        }
        if (file) {
          this.app.vault.read(file).then((md) => {
            if (file) {
              void import_obsidian.MarkdownRenderer.renderMarkdown(md, container, file.path, this);
            }
          }).catch(() => {
          });
        }
        embedContent = container;
      } catch (e) {
      }
      if (!embedContent) {
        return;
      }
    }
    if (block.tagName.toLowerCase() === "span") {
      const firstContentElement = block.querySelector(".embed-title, .markdown-embed-content, .markdown-embed-link");
      if (firstContentElement) {
        block.insertBefore(titleBar, firstContentElement);
      } else {
        block.insertBefore(titleBar, block.firstChild);
      }
      block.style.display = "block";
      block.setAttribute("data-embedded-note-enhanced", "true");
    } else {
      block.insertBefore(titleBar, block.firstChild);
    }
    block.setAttribute("data-title-bar-added", "true");
    block.setAttribute("data-block-id", blockId);
    block.setAttribute("data-file-link", fileName);
    block.setAttribute("data-embedded-note-enhanced", "true");
    block.setAttribute("data-nest-level", nestLevel.toString());
    block.style.setProperty("margin-left", `${nestLevel * 7}px`, "important");
    block.style.setProperty("margin-right", `${nestLevel * 14}px`, "important");
    block.style.setProperty("margin-top", "0px", "important");
    block.style.setProperty("margin-bottom", "0px", "important");
    block.setAttribute("data-editing", "false");
    block.setAttribute("tabindex", "-1");
    const keydownHandler = (e) => {
      const active = document.activeElement;
      if (active && active.closest('[data-block-id="' + blockId + '"]')) {
        e.stopPropagation();
      }
    };
    this.addTrackedEventListener(block, "keydown", keydownHandler, true);
    const stopOpen = (ev) => {
      if (block.getAttribute("data-editing") === "true") {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      ev.preventDefault();
      ev.stopPropagation();
    };
    block.querySelectorAll(".markdown-embed-link, a.internal-link, a[href]").forEach((el) => {
      this.addTrackedEventListener(el, "click", stopOpen, true);
    });
    this.embeddedBlocks.set(blockId, block);
    const isCollapsed = this.collapseStates.get(blockId) || false;
    this.setBlockCollapsed(block, isCollapsed);
    const createdTitleBar = block.querySelector(".embedded-note-title-bar");
    if (this.debugVerbose)
      console.log(`[EmbeddedNoteTitles] Title bar created for block ${blockId}:`, !!createdTitleBar, createdTitleBar);
  }
  /**
   * 计算嵌套层级
   */
  calculateNestLevel(block) {
    var _a;
    let level = 0;
    let parent = block.parentElement;
    while (parent) {
      if ((_a = parent.matches) == null ? void 0 : _a.call(parent, ".markdown-embed, .internal-embed")) {
        level++;
      }
      parent = parent.parentElement;
    }
    return Math.min(level, 3);
  }
  /**
   * 创建标题栏元素
   */
  createTitleBar(fileName, blockId, nestLevel = 0) {
    const titleBar = document.createElement("div");
    titleBar.className = "embedded-note-title-bar";
    titleBar.setAttribute("data-block-id", blockId);
    if (this.debugVerbose)
      console.log(`[EmbeddedNoteTitles] Creating title bar for ${fileName} with class: ${titleBar.className}`);
    titleBar.style.cssText = `
			background-color: var(--background-secondary);
			color: var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)));
			font-size: ${this.settings.fontSize};
			padding: 8px 12px;
			border-bottom: 1px solid var(--background-modifier-border);
			cursor: pointer;
			user-select: none;
			display: flex;
			align-items: center;
			justify-content: space-between;
			transition: background-color 0.2s ease;
		`;
    const titleText = document.createElement("span");
    titleText.textContent = fileName;
    titleText.style.flex = "1";
    titleText.style.fontWeight = "500";
    titleText.style.marginLeft = nestLevel > 0 ? "4px" : "0px";
    const collapseIcon = document.createElement("span");
    collapseIcon.className = "embedded-note-collapse-icon";
    collapseIcon.textContent = "\u25BC";
    collapseIcon.style.fontSize = "12px";
    collapseIcon.style.transition = "transform 0.2s ease";
    collapseIcon.style.display = "inline-block";
    collapseIcon.style.marginLeft = "8px";
    const editBtn = document.createElement("button");
    editBtn.className = "embedded-note-edit-btn";
    editBtn.textContent = "\u7F16\u8F91";
    editBtn.style.marginLeft = "8px";
    editBtn.style.fontSize = "12px";
    editBtn.style.padding = "2px 6px";
    editBtn.style.border = "1px solid var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    editBtn.style.borderRadius = "4px";
    editBtn.style.background = "var(--background-primary)";
    editBtn.style.color = "var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    editBtn.style.display = this.settings.showEditButton ? "inline-block" : "none";
    editBtn.style.cursor = "pointer";
    editBtn.style.transition = "all 0.2s ease";
    const jumpBtn = document.createElement("button");
    jumpBtn.className = "embedded-note-jump-btn";
    jumpBtn.textContent = "\u8DF3\u8F6C";
    jumpBtn.style.marginLeft = "8px";
    jumpBtn.style.fontSize = "12px";
    jumpBtn.style.padding = "2px 6px";
    jumpBtn.style.border = "1px solid var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    jumpBtn.style.borderRadius = "4px";
    jumpBtn.style.background = "var(--background-primary)";
    jumpBtn.style.color = "var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    jumpBtn.style.display = this.settings.showJumpButton ? "inline-block" : "none";
    jumpBtn.style.cursor = "pointer";
    jumpBtn.style.transition = "all 0.2s ease";
    titleBar.appendChild(titleText);
    if (this.settings.showCollapseIcon && titleBar.getAttribute("data-editing") !== "true") {
      titleBar.appendChild(collapseIcon);
    }
    if (this.settings.showEditButton) {
      titleBar.appendChild(editBtn);
    }
    if (this.settings.showJumpButton) {
      titleBar.appendChild(jumpBtn);
    }
    const onMouseEnter = () => {
      titleBar.style.backgroundColor = "var(--background-modifier-hover)";
    };
    const onMouseLeave = () => {
      titleBar.style.backgroundColor = "var(--background-secondary)";
    };
    this.addTrackedEventListener(titleBar, "mouseenter", onMouseEnter);
    this.addTrackedEventListener(titleBar, "mouseleave", onMouseLeave);
    const onTitleClick = (e) => {
      if (e.target.closest(".embedded-note-edit-btn") || e.target.closest(".embedded-note-jump-btn"))
        return;
      const block = this.embeddedBlocks.get(blockId);
      if (block && block.getAttribute("data-editing") === "true")
        return;
      this.toggleBlockCollapse(blockId);
    };
    this.addTrackedEventListener(titleBar, "click", onTitleClick);
    const onEditClick = (e) => {
      e.stopPropagation();
      const block = this.embeddedBlocks.get(blockId);
      if (!block)
        return;
      const embedContent = block.querySelector(".markdown-embed-content");
      if (!embedContent)
        return;
      const editing = block.getAttribute("data-editing") === "true";
      if (editing) {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Disabling inline editing for block ${blockId}`);
        if (this.settings.manualSaveOnly) {
          const editor = embedContent.querySelector("textarea.embedded-note-editor");
          if (editor) {
            this.saveEditorContent(editor, block);
          }
        }
        this.disableInlineEditing(embedContent);
        block.setAttribute("data-editing", "false");
        editBtn.textContent = "\u7F16\u8F91";
        const icon = titleBar.querySelector(".embedded-note-collapse-icon");
        if (this.settings.showCollapseIcon) {
          if (icon)
            icon.style.display = "block";
          else {
            const newIcon = document.createElement("span");
            newIcon.className = "embedded-note-collapse-icon";
            newIcon.textContent = "\u25BC";
            newIcon.style.fontSize = "12px";
            newIcon.style.transition = "transform 0.2s ease";
            newIcon.style.display = "inline-block";
            newIcon.style.marginLeft = "8px";
            titleBar.appendChild(newIcon);
          }
        }
      } else {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Enabling inline editing for block ${blockId}`);
        this.enableInlineEditing(block);
        block.setAttribute("data-editing", "true");
        editBtn.textContent = "\u5B8C\u6210";
        const icon = titleBar.querySelector(".embedded-note-collapse-icon");
        if (icon)
          icon.style.display = "none";
      }
    };
    this.addTrackedEventListener(editBtn, "click", onEditClick);
    const onJumpClick = (e) => {
      e.stopPropagation();
      this.jumpToFile(fileName);
    };
    this.addTrackedEventListener(jumpBtn, "click", onJumpClick);
    return titleBar;
  }
  /**
   * 跳转到指定文件
   */
  jumpToFile(fileName) {
    var _a;
    try {
      const activeFile = this.app.workspace.getActiveFile();
      let file = this.app.metadataCache.getFirstLinkpathDest(fileName, (activeFile == null ? void 0 : activeFile.path) || "");
      if (!file) {
        const direct = this.app.vault.getAbstractFileByPath(fileName);
        const withMd = this.app.vault.getAbstractFileByPath(`${fileName}.md`);
        file = direct || withMd;
      }
      if (file) {
        if (this.settings.jumpInNewTab) {
          const leaf = this.app.workspace.getLeaf("tab");
          leaf.openFile(file);
          if (this.debugVerbose)
            console.log(`[EmbeddedNoteTitles] Jumped to file in new tab: ${file.path}`);
        } else {
          const activeLeaf = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.leaf;
          if (activeLeaf) {
            activeLeaf.openFile(file);
            if (this.debugVerbose)
              console.log(`[EmbeddedNoteTitles] Jumped to file in current view: ${file.path}`);
          } else {
            const leaf = this.app.workspace.getLeaf("tab");
            leaf.openFile(file);
            if (this.debugVerbose)
              console.log(`[EmbeddedNoteTitles] No active Markdown view, opened in new tab: ${file.path}`);
          }
        }
      } else {
        console.warn(`[EmbeddedNoteTitles] File not found: ${fileName}`);
      }
    } catch (error) {
      console.error(`[EmbeddedNoteTitles] Error jumping to file ${fileName}:`, error);
    }
  }
  /**
   * 切换块的折叠状态
   */
  toggleBlockCollapse(blockId) {
    const block = this.embeddedBlocks.get(blockId);
    if (!block)
      return;
    const isCurrentlyCollapsed = this.collapseStates.get(blockId) || false;
    const newState = !isCurrentlyCollapsed;
    this.collapseStates.set(blockId, newState);
    this.settings.collapseStates[blockId] = newState;
    this.saveSettings();
    this.setBlockCollapsed(block, newState);
  }
  /**
   * 设置块的折叠状态
   */
  setBlockCollapsed(block, collapsed) {
    const blockId = block.getAttribute("data-block-id");
    if (!blockId)
      return;
    const titleBar = block.querySelector(".embedded-note-title-bar");
    const collapseIcon = titleBar == null ? void 0 : titleBar.querySelector(".embedded-note-collapse-icon");
    const embedContent = this.getEmbedContent(block);
    if (collapsed) {
      block.classList.add("embedded-note-collapsed");
      if (embedContent) {
        embedContent.style.visibility = "hidden";
        embedContent.style.height = "0";
        embedContent.style.overflow = "hidden";
        this.disableInlineEditing(embedContent);
      }
      if (collapseIcon) {
        collapseIcon.style.transform = "rotate(-90deg)";
      }
    } else {
      block.classList.remove("embedded-note-collapsed");
      if (embedContent) {
        embedContent.style.visibility = "visible";
        embedContent.style.height = "";
        embedContent.style.overflow = "";
        if (block.getAttribute("data-editing") === "true") {
          this.enableInlineEditing(block);
        }
      }
      if (collapseIcon) {
        collapseIcon.style.transform = "rotate(0deg)";
      }
    }
    block.setAttribute("data-nest-level", String(this.calculateNestLevel(block)));
    this.refreshAllNestLevels();
  }
  /**
   * 禁用原地编辑功能
   */
  async disableInlineEditing(embedContent) {
    const block = embedContent.closest(".markdown-embed, .internal-embed");
    if (block) {
      const file = this.resolveLinkedFile(block);
      if (file) {
        this.editingFiles.delete(file.path);
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Removed file from editing set: ${file.path}`);
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Current editing files: ${Array.from(this.editingFiles)}`);
      }
    }
    embedContent.contentEditable = "false";
    embedContent.removeAttribute("data-editable");
    const editor = embedContent.querySelector("textarea.embedded-note-editor");
    const originalContainer = embedContent.querySelector(".embedded-note-original");
    const preview = embedContent.querySelector(".embedded-note-preview");
    if (editor)
      editor.remove();
    if (preview)
      preview.remove();
    if (originalContainer) {
      originalContainer.style.display = "";
      const nodesToRestore = Array.from(originalContainer.childNodes);
      nodesToRestore.forEach((child) => {
        embedContent.insertBefore(child, originalContainer);
      });
      originalContainer.remove();
    } else if (editor) {
      editor.readOnly = true;
      editor.disabled = true;
      editor.style.pointerEvents = "none";
      editor.oninput = null;
    }
    embedContent.style.position = "";
    embedContent.style.border = "";
    embedContent.style.borderRadius = "";
    embedContent.style.padding = "";
    embedContent.style.backgroundColor = "";
    const indicator = embedContent.querySelector(".embedded-note-edit-indicator");
    if (indicator) {
      indicator.remove();
    }
    embedContent.style.position = "";
    embedContent.style.border = "";
    embedContent.style.borderRadius = "";
    embedContent.style.padding = "";
    embedContent.style.backgroundColor = "";
    embedContent.style.display = "block";
    const blockEl = embedContent.closest(".markdown-embed, .internal-embed");
    if (blockEl) {
      blockEl.removeAttribute("data-freeze");
      if (this.debugVerbose)
        console.debug("[EmbeddedNoteTitles] unfreeze on", blockEl.getAttribute("data-block-id"));
    }
  }
  /**
   * 处理文件修改事件
   */
  handleFileModify(file) {
    this.clearFileCache(file.path);
    if (this.editingFiles.has(file.path)) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping file modify for editing file: ${file.basename}`);
      return;
    }
    if (document.querySelector("textarea.embedded-note-editor")) {
      this.logOnce("skip-modify-during-edit", "[EmbeddedNoteTitles] Skip file modify: editor active");
      return;
    }
    const activeElement = document.activeElement;
    const isInOurEditor = activeElement && activeElement.closest(".embedded-note-editor");
    const delay = isInOurEditor ? 500 : 200;
    setTimeout(() => {
      this.handleFileModifyDelayed(file);
    }, delay);
  }
  /**
   * 处理文件保存事件
   */
  handleFileSave(file) {
    this.clearFileCache(file.path);
    if (this.editingFiles.has(file.path)) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping file save for editing file: ${file.basename}`);
      return;
    }
    if (document.querySelector("textarea.embedded-note-editor")) {
      this.logOnce("skip-save-during-edit", "[EmbeddedNoteTitles] Skip file save: editor active");
      return;
    }
    setTimeout(() => {
      this.handleFileModifyDelayed(file);
    }, 300);
    setTimeout(() => {
      this.reprocessAllNestedEmbeds();
    }, 600);
  }
  /**
   * 延迟的文件修改处理
   */
  handleFileModifyDelayed(file) {
    if (this.editingFiles.has(file.path)) {
      console.log(`[EmbeddedNoteTitles] Skipping delayed file modify for editing file: ${file.basename}`);
      return;
    }
    const fileName = file.basename;
    const filePath = file.path;
    this.embeddedBlocks.forEach((block) => {
      const blockFileLink = block.getAttribute("data-file-link");
      if (!blockFileLink)
        return;
      const blockReferencedFile = this.resolveLinkedFile(block);
      if (!blockReferencedFile) {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Cannot resolve file for block with link: ${blockFileLink}, removing enhancement`);
        this.removeEnhancement(block);
        return;
      }
      if (blockReferencedFile.path === filePath) {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Found block referencing modified file ${fileName}`);
        const exists = this.checkEmbedFileExists(block);
        if (!exists) {
          if (this.debugVerbose)
            console.log(`[EmbeddedNoteTitles] File ${fileName} no longer exists, removing enhancement`);
          this.removeEnhancement(block);
        } else {
          if (this.debugVerbose)
            console.log(`[EmbeddedNoteTitles] File ${fileName} still exists, maintaining current state`);
        }
      }
    });
    this.reprocessAllNestedEmbeds();
    this.refreshAllNestLevels();
  }
  /**
   * 重新处理所有嵌套嵌入
   */
  reprocessAllNestedEmbeds() {
    if (this.editingFiles.size > 0 || document.querySelector('[data-freeze="true"]') || document.querySelector("textarea.embedded-note-editor")) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Skipping reprocessAllNestedEmbeds due to editing files: ${Array.from(this.editingFiles)}`);
      return;
    }
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView)
      return;
    const file = activeView.file;
    if (!file)
      return;
    if (!this.shouldReprocessNestedEmbeds(file.path)) {
      return;
    }
    this.logOnce("reprocess-nested", `[EmbeddedNoteTitles] Reprocessing all nested embeds after file modification`);
    const container = activeView.contentEl;
    if (!container)
      return;
    const allEmbeds = container.querySelectorAll('.markdown-embed, .internal-embed, [data-type="markdown-embed"]');
    let reprocessedCount = 0;
    let imageEmbedCount = 0;
    allEmbeds.forEach((embedBlock) => {
      if (this.isImageEmbed(embedBlock)) {
        imageEmbedCount++;
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Skipping reprocess of image embed:`, embedBlock);
        return;
      }
      if (!embedBlock.hasAttribute("data-title-bar-added")) {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Reprocessing unprocessed embed:`, embedBlock);
        this.processEmbeddedBlock(embedBlock);
        reprocessedCount++;
      } else {
        if (this.debugVerbose)
          console.log(`[EmbeddedNoteTitles] Embed already processed, skipping:`, embedBlock);
      }
    });
    this.cacheFileEmbedStructure(file.path, allEmbeds.length, imageEmbedCount > 0);
    if (this.debugVerbose)
      console.log(`[EmbeddedNoteTitles] Reprocessed ${reprocessedCount} nested embeds, found ${imageEmbedCount} image embeds`);
    if (reprocessedCount > 0) {
      setTimeout(() => {
        this.processNestedEmbeds(container, 0);
      }, 100);
      setTimeout(() => {
        this.processAllNestedEmbeds(container);
      }, 300);
    }
  }
  /**
   * 刷新嵌入内容
   */
  // 刷新逻辑已移除，依赖 Obsidian 自动更新嵌入内容
  /**
   * 启用原地编辑功能
   */
  async enableInlineEditing(block) {
    const embedContent = this.getEmbedContent(block);
    if (!embedContent)
      return;
    const file = this.resolveLinkedFile(block);
    if (file) {
      this.editingFiles.add(file.path);
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Added file to editing set: ${file.path}`);
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Current editing files: ${Array.from(this.editingFiles)}`);
    }
    const editors = Array.from(embedContent.querySelectorAll("textarea.embedded-note-editor"));
    if (editors.length > 1) {
      editors.slice(1).forEach((e) => e.remove());
    }
    let editor = editors[0] || embedContent.querySelector("textarea.embedded-note-editor");
    if (!editor) {
      let originalContainer = embedContent.querySelector(".embedded-note-original");
      if (!originalContainer) {
        originalContainer = document.createElement("div");
        originalContainer.className = "embedded-note-original";
        while (embedContent.firstChild) {
          originalContainer.appendChild(embedContent.firstChild);
        }
        embedContent.appendChild(originalContainer);
      }
      originalContainer.style.display = "none";
      editor = document.createElement("textarea");
      editor.className = "embedded-note-editor";
      if (file) {
        try {
          editor.value = await this.app.vault.read(file);
        } catch (e) {
          editor.value = embedContent.textContent || "";
        }
      } else {
        editor.value = embedContent.textContent || "";
      }
      embedContent.appendChild(editor);
    }
    block.setAttribute("data-freeze", "true");
    if (this.debugVerbose)
      console.debug("[EmbeddedNoteTitles] freeze on", block.getAttribute("data-block-id"));
    block.setAttribute("data-freeze", "true");
    this.isolateEditorEvents(editor);
    this.setupTextareaListeners(editor, block);
  }
  /** 解析嵌入块所对应的文件 */
  resolveLinkedFile(block) {
    var _a;
    const titleBar = block.querySelector(".embedded-note-title-bar");
    const fileLink = block.getAttribute("data-file-link") || ((_a = titleBar == null ? void 0 : titleBar.textContent) == null ? void 0 : _a.trim()) || "";
    if (!fileLink)
      return null;
    const activeFile = this.app.workspace.getActiveFile();
    let file = this.app.metadataCache.getFirstLinkpathDest(fileLink, (activeFile == null ? void 0 : activeFile.path) || "");
    if (!file) {
      const direct = this.app.vault.getAbstractFileByPath(fileLink);
      const withMd = this.app.vault.getAbstractFileByPath(`${fileLink}.md`);
      file = direct || withMd;
    }
    return file;
  }
  /** 检查嵌入引用的文件是否存在 */
  checkEmbedFileExists(block) {
    const file = this.resolveLinkedFile(block);
    return !!file;
  }
  /**
   * 检查文件是否为图片类型
   */
  isImageFile(file) {
    if (this.fileTypeCache.has(file.path)) {
      return this.fileTypeCache.get(file.path);
    }
    const imageExtensions = [".png", ".jpg", ".jpeg", ".gif", ".bmp", ".svg", ".webp", ".tiff", ".ico"];
    const extension = file.extension.toLowerCase();
    const isImage = imageExtensions.includes(`.${extension}`);
    this.fileTypeCache.set(file.path, isImage);
    return isImage;
  }
  /**
   * 检查嵌入块是否为图片嵌入
   */
  isImageEmbed(block) {
    var _a;
    if (this.imageEmbedCache.has(block)) {
      return this.imageEmbedCache.get(block);
    }
    let isImage = false;
    if (block.querySelector("img") || block.querySelector(".image-embed") || block.querySelector(".media-embed")) {
      isImage = true;
    } else if (block.classList.contains("image-embed") || block.classList.contains("media-embed")) {
      isImage = true;
    } else {
      const internalLink = block.querySelector("a.internal-link");
      if (internalLink) {
        const href = internalLink.getAttribute("href");
        if (href && this.isImageExtension(href)) {
          isImage = true;
        }
      }
      if (!isImage) {
        const fileLink = block.getAttribute("data-file-link");
        if (fileLink && this.isImageExtension(fileLink)) {
          isImage = true;
        }
      }
      if (!isImage) {
        const internalLink2 = block.querySelector("a.internal-link");
        if (internalLink2) {
          const href = internalLink2.getAttribute("href");
          if (href && !this.isImageExtension(href)) {
            const activeFile = this.app.workspace.getActiveFile();
            const file = this.app.metadataCache.getFirstLinkpathDest(href, (activeFile == null ? void 0 : activeFile.path) || "");
            if (file && this.isImageFile(file)) {
              isImage = true;
            }
          }
        }
        if (!isImage) {
          const fileLink = block.getAttribute("data-file-link");
          if (fileLink && !this.isImageExtension(fileLink)) {
            const activeFile = this.app.workspace.getActiveFile();
            const file = this.app.metadataCache.getFirstLinkpathDest(fileLink, (activeFile == null ? void 0 : activeFile.path) || "");
            if (file && this.isImageFile(file)) {
              isImage = true;
            }
          }
        }
      }
    }
    if (isImage) {
      const embedContent = block.querySelector(".markdown-embed-content");
      if (embedContent) {
        const textContent = ((_a = embedContent.textContent) == null ? void 0 : _a.trim()) || "";
        const hasOnlyImage = embedContent.children.length === 1 && embedContent.querySelector("img") && textContent.length < 10;
        if (!hasOnlyImage) {
          isImage = false;
          if (this.debugVerbose)
            console.log(`[EmbeddedNoteTitles] Text embed with image detected, not excluding:`, block);
        }
      }
    }
    this.imageEmbedCache.set(block, isImage);
    return isImage;
  }
  /**
   * 快速检查文件扩展名是否为图片格式（避免昂贵的文件解析）
   */
  isImageExtension(filePath) {
    const imageExtensions = [".png", ".jpg", ".jpeg", ".gif", ".bmp", ".svg", ".webp", ".tiff", ".ico"];
    const lowerPath = filePath.toLowerCase();
    return imageExtensions.some((ext) => lowerPath.endsWith(ext));
  }
  /**
   * 节流处理，防止短时间内重复处理
   */
  throttledProcess(key, callback, delay = 100) {
    const now = Date.now();
    const lastTime = this.processingThrottle.get(key) || 0;
    if (now - lastTime < delay) {
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Throttling ${key}, last processed ${now - lastTime}ms ago`);
      return;
    }
    this.processingThrottle.set(key, now);
    callback();
  }
  /**
   * 检查文件是否需要重新处理嵌套嵌入
   */
  shouldReprocessNestedEmbeds(filePath) {
    const now = Date.now();
    const cached = this.fileEmbedStructure.get(filePath);
    if (!cached) {
      return true;
    }
    if (now - cached.timestamp > 5 * 60 * 1e3) {
      this.fileEmbedStructure.delete(filePath);
      return true;
    }
    if (this.debugVerbose)
      console.log(`[EmbeddedNoteTitles] Skipping nested processing for ${filePath} (cached ${Math.round((now - cached.timestamp) / 1e3)}s ago)`);
    return false;
  }
  /**
   * 缓存文件的嵌入结构信息
   */
  cacheFileEmbedStructure(filePath, embedCount, hasImages) {
    this.fileEmbedStructure.set(filePath, {
      timestamp: Date.now(),
      embedCount,
      hasImages
    });
  }
  /**
   * 清除文件的缓存，当文件被修改时调用
   */
  clearFileCache(filePath) {
    this.fileEmbedStructure.delete(filePath);
    this.processedFiles.delete(filePath);
    if (this.debugVerbose)
      console.log(`[EmbeddedNoteTitles] Cleared cache for file: ${filePath}`);
  }
  /**
   * 预加载文件类型缓存，提升性能
   */
  preloadFileTypeCache() {
    try {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
      if (!activeView)
        return;
      const container = activeView.contentEl;
      if (!container)
        return;
      const fileLinks = /* @__PURE__ */ new Set();
      const embeds = container.querySelectorAll(".markdown-embed, .internal-embed");
      embeds.forEach((embed) => {
        const fileLink = embed.getAttribute("data-file-link");
        if (fileLink)
          fileLinks.add(fileLink);
        const internalLink = embed.querySelector("a.internal-link");
        if (internalLink) {
          const href = internalLink.getAttribute("href");
          if (href)
            fileLinks.add(href);
        }
      });
      fileLinks.forEach((fileLink) => {
        if (!this.fileTypeCache.has(fileLink)) {
          const activeFile = this.app.workspace.getActiveFile();
          const file = this.app.metadataCache.getFirstLinkpathDest(fileLink, (activeFile == null ? void 0 : activeFile.path) || "");
          if (file) {
            this.isImageFile(file);
          }
        }
      });
      if (this.debugVerbose)
        console.log(`[EmbeddedNoteTitles] Preloaded ${fileLinks.size} file types`);
    } catch (error) {
      if (this.debugVerbose)
        console.warn("[EmbeddedNoteTitles] Error preloading file type cache:", error);
    }
  }
  /** 撤销对嵌入块的增强，恢复为 Obsidian 默认显示 */
  removeEnhancement(block) {
    this.removeTrackedEventListenersForRoot(block);
    const titleBar = block.querySelector(".embedded-note-title-bar");
    if (titleBar)
      titleBar.remove();
    const embedContent = block.querySelector(".markdown-embed-content");
    if (embedContent) {
      const editor = embedContent.querySelector("textarea.embedded-note-editor");
      if (editor)
        editor.remove();
      const original = embedContent.querySelector(".embedded-note-original");
      if (original)
        original.remove();
    }
    block.removeAttribute("data-title-bar-added");
    block.removeAttribute("data-block-id");
    block.removeAttribute("data-file-link");
    block.removeAttribute("data-editing");
    block.removeAttribute("tabindex");
    block.removeAttribute("data-original-html");
    block.removeAttribute("data-nest-level");
    block.classList.remove("embedded-note-collapsed");
    block.removeAttribute("data-embedded-note-enhanced");
  }
  /** 阻断 textarea 事件向上冒泡，避免触发工作区热键/跳转 */
  isolateEditorEvents(editor) {
    const stop = (e) => {
      var _a;
      e.stopPropagation();
      (_a = e.stopImmediatePropagation) == null ? void 0 : _a.call(e);
      e.cancelBubble = true;
    };
    ["keydown", "keypress", "keyup", "mousedown", "click", "dblclick", "wheel", "focus", "focusin"].forEach((type) => {
      editor.addEventListener(type, stop, true);
      editor.addEventListener(type, stop, false);
    });
    editor.addEventListener("keydown", (e) => {
      var _a;
      if (!e.ctrlKey && !e.metaKey && !e.altKey) {
        e.stopPropagation();
        (_a = e.stopImmediatePropagation) == null ? void 0 : _a.call(e);
      }
    }, true);
  }
  /**
   * 添加编辑指示器
   */
  // 删除常驻编辑提示逻辑
  /**
   * 设置编辑监听器
   */
  setupTextareaListeners(editor, block) {
    let saveTimeout;
    const triggerSave = () => {
      if (this.settings.manualSaveOnly)
        return;
      if (saveTimeout)
        clearTimeout(saveTimeout);
      const delay = Math.max(0, this.settings.autoSaveDelay || 1e3);
      saveTimeout = setTimeout(() => {
        this.saveEditorContent(editor, block);
      }, delay);
    };
    editor.addEventListener("input", async () => {
      triggerSave();
    });
    editor.addEventListener("blur", () => {
      if (this.settings.manualSaveOnly)
        return;
      if (saveTimeout)
        clearTimeout(saveTimeout);
      this.saveEditorContent(editor, block);
    });
    editor.addEventListener("keydown", (e) => {
      if (e.ctrlKey && e.key === "s") {
        e.preventDefault();
        if (saveTimeout)
          clearTimeout(saveTimeout);
        this.saveEditorContent(editor, block);
      }
    });
  }
  // 移除自定义预览渲染，回退到 Obsidian 的原生渲染
  /**
   * 保存嵌入内容
   */
  async saveEditorContent(editor, block) {
    try {
      const file = this.resolveLinkedFile(block);
      if (!file) {
        console.warn("[EmbeddedNoteTitles] Cannot resolve file for block");
        return;
      }
      this.editingFiles.add(file.path);
      const newContent = editor.value;
      await this.app.vault.modify(file, newContent);
      this.showSaveIndicator(editor, true);
      setTimeout(() => {
        this.editingFiles.delete(file.path);
      }, 1e3);
    } catch (error) {
      console.error("\u4FDD\u5B58\u5D4C\u5165\u5185\u5BB9\u5931\u8D25:", error);
      this.showSaveIndicator(editor, false);
      const file = this.resolveLinkedFile(block);
      if (file) {
        this.editingFiles.delete(file.path);
      }
    }
  }
  /**
   * 显示保存指示器
   */
  showSaveIndicator(targetEl, success) {
    const toast = document.createElement("div");
    toast.textContent = success ? "\u2705 \u5DF2\u4FDD\u5B58" : "\u274C \u4FDD\u5B58\u5931\u8D25";
    toast.style.cssText = `
			position: absolute;
			top: 6px;
			right: 10px;
			background: var(--background-secondary);
			color: ${success ? "var(--text-success)" : "var(--text-error)"};
			border: 1px solid var(--background-modifier-border);
			border-radius: 4px;
			padding: 2px 6px;
			font-size: 12px;
			opacity: 0.95;
			pointer-events: none;
			z-index: 2;
		`;
    const host = targetEl.parentElement || targetEl;
    host.style.position = host.style.position || "relative";
    host.appendChild(toast);
    setTimeout(() => toast.remove(), 1400);
  }
  /**
   * 提取文件名
   */
  extractFileName(href) {
    const wikiMatch = href.match(/\[\[([^\]]+)\]\]/);
    if (wikiMatch)
      return wikiMatch[1];
    try {
      let raw = href;
      if (/^[a-zA-Z]+:\/\//.test(href)) {
        const url = new URL(href);
        const fileParam = url.searchParams.get("file");
        if (fileParam)
          raw = decodeURIComponent(fileParam);
        else
          raw = decodeURIComponent(url.pathname);
      }
      raw = raw.split("#")[0].split("?")[0];
      raw = raw.replace(/^\/+/, "");
      const parts = raw.split("/");
      let base = parts[parts.length - 1];
      base = base.replace(/\.md$/i, "");
      return base || null;
    } catch (e) {
      return null;
    }
  }
  /**
   * 生成块ID
   */
  generateBlockId(block, fileName) {
    const activeFile = this.app.workspace.getActiveFile();
    const activeFilePath = (activeFile == null ? void 0 : activeFile.path) || "unknown";
    const nestLevel = this.calculateNestLevel(block);
    let parentContext = "";
    let parent = block.parentElement;
    while (parent) {
      const parentBlockId = parent.getAttribute("data-block-id");
      if (parentBlockId) {
        parentContext = `-parent-${parentBlockId}`;
        break;
      }
      parent = parent.parentElement;
    }
    const baseId = `embedded-${activeFilePath.replace(/[^a-zA-Z0-9]/g, "_")}-${fileName.replace(/[^a-zA-Z0-9]/g, "_")}-level${nestLevel}${parentContext}`;
    if (baseId.length > 100) {
      const hash = this.simpleHash(baseId);
      return `embedded-${fileName.replace(/[^a-zA-Z0-9]/g, "_")}-level${nestLevel}-${hash}`;
    }
    return baseId;
  }
  /**
   * 简单哈希函数，用于生成短ID
   */
  simpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(36);
  }
  /**
   * 手动触发处理（调试用）
   */
  manualTrigger() {
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] Manual trigger called");
    this.processEmbeddedBlocks();
    setTimeout(() => {
      this.reprocessAllNestedEmbeds();
    }, 500);
  }
  /**
   * 移除样式
   */
  removeStyles() {
    const styleEl = document.getElementById("embedded-note-titles-styles");
    if (styleEl) {
      styleEl.remove();
    }
  }
  /**
   * 还原 Obsidian 原版样式
   */
  restoreOriginalObsidianStyles(block) {
    block.style.cssText = "";
    block.classList.remove("embedded-note-collapsed");
    const content = this.getEmbedContent(block);
    if (content) {
      content.style.cssText = "";
      content.style.visibility = "visible";
      content.style.height = "auto";
      content.style.overflow = "visible";
      content.style.display = "";
      content.style.paddingLeft = "";
      content.style.paddingRight = "";
      content.style.boxSizing = "";
    }
    const titleBar = block.querySelector(".embedded-note-title-bar");
    if (titleBar) {
      titleBar.remove();
    }
    const editor = block.querySelector("textarea.embedded-note-editor");
    if (editor) {
      editor.remove();
    }
    const original = block.querySelector(".embedded-note-original");
    if (original) {
      const children = Array.from(original.children);
      children.forEach((child) => {
        if (content) {
          content.appendChild(child);
        }
      });
      original.remove();
    }
    if (block.tagName.toLowerCase() === "span" && block.classList.contains("internal-embed")) {
      block.style.display = "inline";
    }
    block.removeAttribute("data-embedded-note-enhanced");
    block.removeAttribute("data-title-bar-added");
    block.removeAttribute("data-block-id");
    block.removeAttribute("data-nest-level");
    block.removeAttribute("data-editing");
    block.removeAttribute("data-file-link");
    block.removeAttribute("tabindex");
    block.removeAttribute("data-original-html");
  }
  /**
   * 移除所有标题栏
   */
  removeAllTitleBars() {
    var _a, _b;
    if (this.debugVerbose)
      console.log("[EmbeddedNoteTitles] removeAllTitleBars called");
    const enhancedBlocks = document.querySelectorAll(".markdown-embed[data-embedded-note-enhanced], .internal-embed[data-embedded-note-enhanced]");
    enhancedBlocks.forEach((el) => {
      this.removeTrackedEventListenersForRoot(el);
      this.removeTitleBarFromBlock(el);
    });
    const allTitleBars = document.querySelectorAll(".embedded-note-title-bar");
    allTitleBars.forEach((titleBar) => {
      titleBar.remove();
    });
    const allEditors = document.querySelectorAll("textarea.embedded-note-editor");
    allEditors.forEach((editor) => {
      editor.remove();
    });
    const allOriginals = document.querySelectorAll(".embedded-note-original");
    allOriginals.forEach((original) => {
      original.remove();
    });
    const allPreviews = document.querySelectorAll(".embedded-note-preview");
    allPreviews.forEach((preview) => {
      preview.remove();
    });
    const allEmbeds = document.querySelectorAll(".markdown-embed, .internal-embed");
    allEmbeds.forEach((embed) => {
      const block = embed;
      block.removeAttribute("data-embedded-note-enhanced");
      block.removeAttribute("data-title-bar-added");
      block.removeAttribute("data-block-id");
      block.removeAttribute("data-nest-level");
      block.removeAttribute("data-editing");
      block.removeAttribute("data-file-link");
      block.removeAttribute("tabindex");
      block.removeAttribute("data-original-html");
      block.classList.remove("embedded-note-collapsed");
      block.style.cssText = "";
      if (block.tagName.toLowerCase() === "span" && block.classList.contains("internal-embed")) {
        block.style.display = "inline";
      }
    });
    this.embeddedBlocks.clear();
    this.collapseStates.clear();
    try {
      (_b = (_a = this.app.workspace).trigger) == null ? void 0 : _b.call(_a, "layout-change");
    } catch (e) {
    }
    void this.refreshActiveMarkdownView();
  }
  /**
   * 从指定块中移除标题栏并还原样式
   */
  removeTitleBarFromBlock(block) {
    this.removeTrackedEventListenersForRoot(block);
    const titleBar = block.querySelector(".embedded-note-title-bar");
    if (titleBar) {
      titleBar.remove();
    }
    const editor = block.querySelector("textarea.embedded-note-editor");
    if (editor) {
      editor.remove();
    }
    const original = block.querySelector(".embedded-note-original");
    if (original) {
      const embedContent = this.getEmbedContent(block);
      if (embedContent) {
        const children = Array.from(original.children);
        children.forEach((child) => {
          embedContent.appendChild(child);
        });
      }
      original.remove();
    }
    const preview = block.querySelector(".embedded-note-preview");
    if (preview) {
      preview.remove();
    }
    this.restoreOriginalObsidianStyles(block);
  }
};
var EmbeddedNoteTitlesSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Embedded Note Titles \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u5B57\u4F53\u5927\u5C0F").setDesc("\u8BBE\u7F6E\u6807\u9898\u680F\u5B57\u4F53\u5927\u5C0F").addDropdown((dropdown) => dropdown.addOption("12px", "12px").addOption("14px", "14px").addOption("16px", "16px").addOption("18px", "18px").addOption("20px", "20px").addOption("22px", "22px").addOption("24px", "24px").addOption("26px", "26px").addOption("28px", "28px").addOption("30px", "30px").addOption("32px", "32px").addOption("34px", "34px").addOption("36px", "36px").addOption("38px", "38px").addOption("40px", "40px").addOption("42px", "42px").addOption("44px", "44px").addOption("46px", "46px").addOption("48px", "48px").setValue(this.plugin.settings.fontSize).onChange(async (value) => {
      this.plugin.settings.fontSize = value;
      await this.plugin.saveSettings();
      this.updateTitleBarStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u6298\u53E0\u56FE\u6807").setDesc("\u5728\u6807\u9898\u680F\u53F3\u4FA7\u663E\u793A\u6298\u53E0/\u5C55\u5F00\u56FE\u6807").addToggle((toggle) => toggle.setValue(this.plugin.settings.showCollapseIcon).onChange(async (value) => {
      this.plugin.settings.showCollapseIcon = value;
      await this.plugin.saveSettings();
      this.updateTitleBarStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u7F16\u8F91\u6309\u94AE").setDesc("\u5728\u6807\u9898\u680F\u53F3\u4FA7\u663E\u793A\u7F16\u8F91\u6309\u94AE\uFF0C\u70B9\u51FB\u53EF\u4EE5\u539F\u5730\u7F16\u8F91\u5D4C\u5165\u5185\u5BB9").addToggle((toggle) => toggle.setValue(this.plugin.settings.showEditButton).onChange(async (value) => {
      this.plugin.settings.showEditButton = value;
      await this.plugin.saveSettings();
      this.updateTitleBarStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("\u663E\u793A\u8DF3\u8F6C\u6309\u94AE").setDesc("\u5728\u6807\u9898\u680F\u53F3\u4FA7\u663E\u793A\u8DF3\u8F6C\u6309\u94AE\uFF0C\u70B9\u51FB\u53EF\u4EE5\u8DF3\u8F6C\u5230\u5BF9\u5E94\u6587\u4EF6").addToggle((toggle) => toggle.setValue(this.plugin.settings.showJumpButton).onChange(async (value) => {
      this.plugin.settings.showJumpButton = value;
      await this.plugin.saveSettings();
      this.updateTitleBarStyles();
    }));
    new import_obsidian.Setting(containerEl).setName("\u8DF3\u8F6C\u65B9\u5F0F").setDesc("\u9009\u62E9\u8DF3\u8F6C\u6309\u94AE\u7684\u884C\u4E3A\uFF1A\u5728\u65B0\u6807\u7B7E\u9875\u4E2D\u6253\u5F00\u6587\u4EF6\uFF0C\u6216\u5728\u5F53\u524D\u89C6\u56FE\u4E2D\u6253\u5F00\u6587\u4EF6").addDropdown((dropdown) => dropdown.addOption("newTab", "\u65B0\u6807\u7B7E\u9875\u4E2D\u6253\u5F00").addOption("currentView", "\u5F53\u524D\u89C6\u56FE\u4E2D\u6253\u5F00").setValue(this.plugin.settings.jumpInNewTab ? "newTab" : "currentView").onChange(async (value) => {
      this.plugin.settings.jumpInNewTab = value === "newTab";
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u4EC5\u624B\u52A8\u4FDD\u5B58").setDesc("\u5173\u95ED\u81EA\u52A8\u4FDD\u5B58\uFF0C\u4EC5\u5728 Ctrl+S \u6216\u70B9\u51FB\u5B8C\u6210\u65F6\u4FDD\u5B58").addToggle((toggle) => toggle.setValue(this.plugin.settings.manualSaveOnly).onChange(async (value) => {
      this.plugin.settings.manualSaveOnly = value;
      await this.plugin.saveSettings();
    }));
  }
  /**
   * 创建折叠图标
   */
  createCollapseIcon() {
    const collapseIcon = document.createElement("span");
    collapseIcon.className = "embedded-note-collapse-icon";
    collapseIcon.textContent = "\u25BC";
    collapseIcon.style.fontSize = "12px";
    collapseIcon.style.transition = "transform 0.2s ease";
    collapseIcon.style.display = "inline-block";
    collapseIcon.style.marginLeft = "8px";
    return collapseIcon;
  }
  /**
   * 创建编辑按钮
   */
  createEditButton(titleBar) {
    const editBtn = document.createElement("button");
    editBtn.className = "embedded-note-edit-btn";
    editBtn.textContent = "\u7F16\u8F91";
    editBtn.style.marginLeft = "8px";
    editBtn.style.fontSize = "12px";
    editBtn.style.padding = "2px 6px";
    editBtn.style.border = "1px solid var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    editBtn.style.borderRadius = "4px";
    editBtn.style.background = "var(--background-primary)";
    editBtn.style.color = "var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    editBtn.style.display = "inline-block";
    editBtn.style.cursor = "pointer";
    editBtn.style.transition = "all 0.2s ease";
    const onEditClick = (e) => {
      e.stopPropagation();
      const blockId = titleBar.getAttribute("data-block-id");
      if (!blockId)
        return;
      this.plugin.processEmbeddedBlocks();
    };
    editBtn.addEventListener("click", onEditClick);
    return editBtn;
  }
  /**
   * 创建跳转按钮
   */
  createJumpButton(titleBar) {
    const jumpBtn = document.createElement("button");
    jumpBtn.className = "embedded-note-jump-btn";
    jumpBtn.textContent = "\u8DF3\u8F6C";
    jumpBtn.style.marginLeft = "8px";
    jumpBtn.style.fontSize = "12px";
    jumpBtn.style.padding = "2px 6px";
    jumpBtn.style.border = "1px solid var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    jumpBtn.style.borderRadius = "4px";
    jumpBtn.style.background = "var(--background-primary)";
    jumpBtn.style.color = "var(--interactive-accent, var(--text-accent, var(--accent, #7c3aed)))";
    jumpBtn.style.display = "inline-block";
    jumpBtn.style.cursor = "pointer";
    jumpBtn.style.transition = "all 0.2s ease";
    const onJumpClick = (e) => {
      var _a;
      e.stopPropagation();
      const fileName = ((_a = titleBar.textContent) == null ? void 0 : _a.trim()) || "";
      if (fileName) {
        this.plugin.jumpToFile(fileName);
      }
    };
    jumpBtn.addEventListener("click", onJumpClick);
    return jumpBtn;
  }
  /**
   * 更新标题栏样式
   */
  updateTitleBarStyles() {
    const titleBars = document.querySelectorAll(".embedded-note-title-bar");
    titleBars.forEach((titleBar) => {
      const titleBarElement = titleBar;
      titleBarElement.style.fontSize = this.plugin.settings.fontSize;
      let collapseIcon = titleBarElement.querySelector(".embedded-note-collapse-icon");
      const hostBlock = titleBarElement.closest(".markdown-embed, .internal-embed");
      const isEditing = (hostBlock == null ? void 0 : hostBlock.getAttribute("data-editing")) === "true";
      if (this.plugin.settings.showCollapseIcon && !isEditing && !collapseIcon) {
        collapseIcon = this.createCollapseIcon();
        titleBarElement.appendChild(collapseIcon);
      } else if (collapseIcon) {
        collapseIcon.style.display = this.plugin.settings.showCollapseIcon && !isEditing ? "block" : "none";
      }
      let editBtn = titleBarElement.querySelector(".embedded-note-edit-btn");
      if (this.plugin.settings.showEditButton && !editBtn) {
        editBtn = this.createEditButton(titleBarElement);
        titleBarElement.appendChild(editBtn);
      } else if (editBtn) {
        editBtn.style.display = this.plugin.settings.showEditButton ? "inline-block" : "none";
      }
      let jumpBtn = titleBarElement.querySelector(".embedded-note-jump-btn");
      if (this.plugin.settings.showJumpButton && !jumpBtn) {
        jumpBtn = this.createJumpButton(titleBarElement);
        titleBarElement.appendChild(jumpBtn);
      } else if (jumpBtn) {
        jumpBtn.style.display = this.plugin.settings.showJumpButton ? "inline-block" : "none";
      }
      const block = titleBarElement.closest(".markdown-embed");
      if (block) {
        const embedContent = block.querySelector(".markdown-embed-content");
        if (embedContent) {
          if (block.getAttribute("data-editing") === "true") {
            this.plugin.enableInlineEditing(block);
          } else {
            this.plugin.disableInlineEditing(embedContent);
          }
        }
      }
    });
  }
};
